"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from decouple import config
from dotenv import load_dotenv
from pathlib import Path
from datetime import timedelta
from logging.handlers import RotatingFileHandler
from django.db.backends.signals import connection_created
from django.dispatch import receiver

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)4#81d(w90@u3=o7dc#o&!b%khx7ji7yrvff-ia7fuwj$c+dkd'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework.authtoken',
    'rest_framework',
    'rest_framework_simplejwt',
    'core',
    'drf_yasg',
    'corsheaders',
    'customers',
    'otp_auth',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
   "http://localhost:5173",
   "https://shobaskitchen.com",
]

ROOT_URLCONF = 'backend.urls'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_WHATSAPP_FROM = os.getenv("TWILIO_WHATSAPP_FROM")


AUTH_USER_MODEL = 'core.CustomUser'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
   'DEFAULT_AUTHENTICATION_CLASSES': [
   'rest_framework_simplejwt.authentication.JWTAuthentication',
   ],
   'DEFAULT_PERMISSION_CLASSES': [
       'rest_framework.permissions.AllowAny',
   ],
   'DEFAULT_THROTTLE_CLASSES': [
       'rest_framework.throttling.UserRateThrottle',
       'rest_framework.throttling.AnonRateThrottle',
       'core.throttles.FeedbackRateThrottle',
   ],
   'DEFAULT_THROTTLE_RATES': {
       'user': '1000000/day',     # Authenticated users - 100 requests/day
       'anon': '2000000/day',      # Anonymous users - 20 requests/day
       'feedback': '50000/day',
   }
}


SIMPLE_JWT = {
   "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
   "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
   "ROTATE_REFRESH_TOKENS": True,
   "BLACKLIST_AFTER_ROTATION": True,
}


LOGGING = {
   'version': 1,
   'disable_existing_loggers': False,
  
   'formatters': {
       'verbose': {
           'format': '{asctime} [{levelname}] {name}.{funcName}:{lineno} â€” {message}',
           'style': '{',
       },
       'simple': {
           'format': '[{levelname}] {message}',
           'style': '{',
       },
   },


   'handlers': {
       'rotating_file': {
           'level': 'INFO',
           'class': 'logging.handlers.RotatingFileHandler',
           'filename': os.path.join(BASE_DIR, 'logs', 'shobas_kitchen.log'),
           'maxBytes': 1024 * 1024 * 5,  # 5MB
           'backupCount': 5,             # keep 5 old logs
           'formatter': 'verbose',
       },   
       'info_file': {
           'level': 'INFO',
           'class': 'logging.FileHandler',
           'filename': os.path.join(BASE_DIR, 'logs', 'info.log'),
           'formatter': 'verbose',
       },
       'error_file': {
           'level': 'WARNING',  # Captures WARNING and ERROR and CRITICAL
           'class': 'logging.FileHandler',
           'filename': os.path.join(BASE_DIR, 'logs', 'error.log'),
           'formatter': 'verbose',
       },  
       'file': {
           'class': 'logging.FileHandler',
           'filename': os.path.join(BASE_DIR, 'logs', 'shobas_kitchen.log'),
           'formatter': 'verbose',
       },    
       'console': {
           'class': 'logging.StreamHandler',
           'formatter': 'verbose',
       },


   },


   'loggers': {
       '': {  # root logger
           'handlers': ['rotating_file'],
           'level': 'INFO',
           'propagate': True,
       },   
       'django': {
           'handlers': ['info_file', 'error_file', 'file', 'console'],
           'level': 'INFO',
           'propagate': True,
       },
       'core': {
           'handlers': ['info_file', 'error_file', 'console'],
           'level': 'INFO',
           'propagate': False,
       },
   },
}
